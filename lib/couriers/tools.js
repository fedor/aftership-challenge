// Generated by CoffeeScript 1.7.1
(function() {
  var cheerio, get, parseString, request,
    __slice = [].slice;

  request = require('request');

  cheerio = require('cheerio');

  parseString = require('xml2js').parseString;

  exports.utc_date = function(date_string) {
    var date;
    date = new Date(date_string);
    date = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));
    date = date.toISOString();
    return date = date.substring(0, date.length - 5);
  };

  get = function() {
    var callback, request_args, _i;
    request_args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
    return request.apply(this, request_args.concat(function(error, response, body) {
      if (error) {
        return callback(error);
      }
      if (response.statusCode !== 200) {
        return callback(new Error("HTTP returned " + response.statusCode));
      }
      return callback(null, body);
    }));
  };

  exports.request_xml = function() {
    var callback, request_args, _i;
    request_args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
    return get.apply(null, request_args.concat(function(error, body) {
      if (error) {
        return callback(error);
      }
      return parseString(body, callback);
    }));
  };

  exports.request_json = function() {
    var callback, request_args, _i;
    request_args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
    return get.apply(null, request_args.concat(function(error, body) {
      var obj;
      if (error) {
        return callback(error);
      }
      try {
        obj = JSON.parse(body);
        return callback(null, obj);
      } catch (_error) {
        error = _error;
        return callback(error);
      }
    }));
  };

  exports.request_html_get = function() {
    var callback, request_args, _i;
    request_args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
    return get.apply(null, request_args.concat(function(error, body) {
      if (error) {
        return callback(error);
      }
      return callback(null, cheerio.load(body));
    }));
  };

}).call(this);
